2021-12-20
On the HOMD taxon abundance, for operational next steps, I'm thinking:

-create a table with rows for all HOMD taxa plus "gut taxa" and "no 98.5% match in HOMD"; 
for each of these, there is a column for percent abundance in each individual x body site 
   --> 770 columns of data.  Also there should be a column for "Taxon Abundance Notes"

-going line by line through the oligotype table you created,
if "Assign_reads_to" says "gut", add those % abundances to "gut taxa",
if "Assign_reads_to" says "no_close_match_in_HOMD", add those % abundances to 
    "no 98.5% match in HOMD";
if "Assign_reads_to" says "100", add those % abundances to the relevant HOMD taxon 
    in the new table;
if there are multiple relevant HOMD taxa, multiply the percentage in "Assign_reads_to" 
    by the % abundance and add that to the taxon in the new table.

Also, if there is a value in "Add_Note", append that value to "Taxon Abundance Notes".

2021-12-19
We have worked out how to update the Eren et al. 2014 tables to new HOMD taxonomy.  Yay!

Let's save this file as a useful endpoint relating oligotypes to HOMD taxa:
   ***NEW-BLAST_PARSE_RESULT-JMWcuration_wpcts.csv => HOMD-endpoint1-wpcts.csv
   
Then, for using this data to assign abundances to HOMD taxa at each oral site, the next steps are:

-combine the "gut" oligotypes into a single thing called "99 gut oligotypes" (which will have an 
 abundance in each site in each individual) => col7
-combine the "no_close_match_in_HOMD" oligotypes into a single thing called "no 98.5% match in HOMD" 
 (which will also have an abundance in each site in each individual) => col7
-assign the remaining oligotypes to HOMD taxa, to calculate their abundance in each site 
  in each individual.

================================================================
2021-12-18
RUNNING THE SCRIPTS (steps):
1) ./eren2014_blast_parse_abundance.py -i Eren2014-FromDatasetS1-oligotypesV1V3.csv
   The infile has sequences that it writes into individual files then creates and runs
  a blast shell script (one blast command per *.fa file) then outputs the blast rusults
  in a specific format (all in the ./work directory)
2) Run the same script but with the --parse tag: 
   eren2014_blast_parse_abundance.py --parse
   This parses all the blast out files in ./work and calculates NUM_BEST_HITS BEST_PCT_ID BEST_FULL_PCT_ID
   Output is BLAST_PARSE_RESULT.csv
3) Hand-curation by JMW: must now add 'ABUNDANCE_IN' (Changed to BODY_SITE by JMW) column to BLAST_PARSE_RESULT.csv 
   (use V1-V3-BodySiteList-Curated-218-Firmicutes_fixed.csv as input)
   eren2014_combine_curtated.py -i1
4) Hand-curation by JMW: must now add 'Assign_reads_to' and 'Add_Note' columns to BLAST_PARSE_RESULT.csv
   (use BLAST_PARSE_RESULT-JMWcuration.csv as input)
   eren2014_combine_curtated.py
   See: V1-V3-BodySiteList-Curated-extra.csv
5) add the oral subject-site counts to the file from data found here S01:
   https://www.pnas.org/content/111/28/E2875/tab-figures-data
   eren2014_add_counts_per_site.py -i1 BLAST_PARSE_RESULT-JMWcuration.csv -i2 pnas_counts_per_oligo.csv

6) Finally run
   ../eren2014_calculate_pcts.py -i NEW-BLAST_PARSE_RESULT-JMWcuration_wcounts.csv
   to convert counts to percents (summing each subject-site across all oligotypes)
   Endpoint1: filename w/ pcts:  HOMD-endpoint1-wpcts.csv
   testing: cut -f1,7 HOMD-endpoint1-wpcts.csv

7) Creates a table of all HMTS in HOMD with 770 columns of subject-sites
   Then fill in those abundance cells with the data from the 'endpoint1' infile:
   Create 'gut' and 'noclosematch'; split off HMTs; add abund*multiplier in 'Assign_reads_to'
   ../eren2014_coalesce.py -i HOMD-endpoint1-wpcts.csv
   
================================================================
2021-12-17
*** Percent is calculated by getting the sum of all oligotype counts in a particular sample 
    (e.g. 147406386-TD is a sample from the tongue dorsum of person 147406386), 
    then dividing the counts of each oligotype by the total counts in that sample.
    but no, we want to total each subject count across all oligotypes, separately for each of the oral sites.  
    We're just converting counts to percents within each separate sample.
*** Prevalence = 
   (# of individuals in which this HMT is non-zero at this site)/(total number of individuals for whom we have samples at this site)
   
qend-qstart+1 /qlength == fract align
FULL == PCTID*fract_align  should be == or less than PCTID

from email:
=======================================
There are a few oligotypes with anomalous results -- like V1V3_109_Actinobacteria has best-percent-ID 99.123% and full-percent-ID 100%.  What's going on there?  Full percent ID should always be less than or equal to best percent ID I think.
We can discuss -- I'm free all day.
Once that's figured out -- Great!  You have successfully assigned taxonomy to each oligotype!  Step 1 is complete.

Then we will need to do step 2: 
-add to this table the column showing "ABUNDANT_IN" in the attached "Eren2014-FromDatasetS1-oligotypesV1V3".  We will use "ABUNDANT_IN" to figure out which samples are from stool.
***NOTE :: Use file V1-V3-BodySiteList-Curated-218-Firmicutes.csv instead***

Then: add the counts for each oligotype in each sample, from Dataset S01 here 
https://www.pnas.org/content/111/28/E2875/tab-figures-data
This will create a counts matrix (observation matrix) with these taxonomy labels attached.

Eliminate columns with fewer than (arbitrarily chosen) 800 total reads (I count 12 such columns)
***NOTE:: make it 1000 total reads per JMW

Then convert counts to percents so we have a matrix of percent abundance of each oligotype in each sample.  Save this, for future reference, as the percent matrix.

Then the last step:  group the oligotypes into species:
take the 99 oligotypes for which ABUNDANT_IN = ST and which are not Dialister invisus V1V3_218_Firmicutes (special pleading, ugh, but it's because Dialister invisus is a 100% match to an oral taxon.)
Group these 99 into "99 gut oligotypes".

For the remaining oligotypes,
if overall % identity is <98.5%, group into "no close match in HOMD"

if overall % identity is >= 98.5%,
If it matches a single HMT, add it to that HMT
If it matches multiple HMTs, divide the reads equally among the HMTs -- except for a few cases that I'd like to curate.  Let's figure this part out when we get there!

Talk to you soon,
Jessica
============================================


2021-12-15
Next steps: frm email JMW(2021-12-14)
So, if we can correct those three things, step 1 is complete!

Step 2a will be to merge this table with the table showing counts for each oligotype in 
   each sample to create the counts matrix (observation matrix) with these taxonomy labels attached.

Step 2b will be to convert counts to percents so we have a matrix of percent abundance of 
   each oligotype in each sample.

Step 3 will be to group the oligotypes into species:
take the 99 oligotypes characteristic of gut, group them into "99 gut oligotypes";
For the remaining oligotypes,
if overall % identity is <98.5%, discard (or put into "no close match in HOMD")
then combine all remaining oligotypes that map to the same species,
and create a new table with % abundance of each species in each sample.

2021-12-14
# Fields: bit score, % identity, % query coverage per hsp, subject title
blastn  -db ../BLASTDB_ABUND/HOMD_16S_rRNA_RefSeq_V15.22.p9.fasta -query V1V3_593_Firmicutes.fna -out test.out -outfmt '7 nident pident length mismatch qcovhsp qcovs stitle' -max_target_seqs 30
blastn  -db ../BLASTDB_ABUND/HOMD_16S_rRNA_RefSeq_V15.22.p9.fasta -query V1V3_593_Firmicutes.fna -out test4.out -outfmt 0 -num_descriptions 1 -num_alignments 1

HSP = High Scoring Pairs
# BLASTN 2.7.1+
# Query: V1V3_593_Firmicutes
# Database: ../BLASTDB_ABUND/HOMD_16S_rRNA_RefSeq_V15.22.p9.fasta
# Fields: identical, % identity, alignment length, mismatches, % query coverage per hsp, % query coverage per subject, subject title
# 30 hits found
245	95.703	256	11	100	100	096DO008 | Lachnospiraceae [G-2] bacterium HMT 096 | HMT-096 | Clone: DO008 | GB: AF385508 | Status: Unnamed | Preferred Habitat: Oral | Genome: Genome: no

identical == 245  == # of identities
q-sequence length == q.end
alignmentLength - mismatches == 245  == matched reg of subject sequence

alignmentLength = 256  == query sequence length


# Fields: identical, % identity, % query coverage per hsp, % query coverage per subject, subject title
blast_outfmt = "'7 qseqid bitscore nident qstart qend stitle'"
alignmentLength - mismatches - gaps/ query length == FULL_PCT_ID
same as identical/ query-length (q.end - q.start)
FullpctID

V1V3_591_Firmicutes	344	233	91.016	99	935_8649 | Fastidiosipila sanguinis | HMT-935 | Clone: nck255g10c1 | GB: KF098649 | Status: Named | Preferred Habitat: Unassigned | Genome: Genome: no

how to arrive at 99% col4

# Fields: %identity, alignment-length, mismatches, gap-opens, q.start, q.end, s.start, s.end, evalue,   bit-score
	      91.016	 256	           22	       1	      2	       256	  249	   504	  6.53e-96	344



Input file:
   Eren2014-FromDatasetS1-oligotypesV1V3.csv
From JMW:
           Our goal is to use column D (REP_SEQ) in a BLAST against HOMD 16S refSeq, 
           to recreate updated versions of columns J through P (best hit % identity, 
           best hit % coverage, number of HMTs that are equally best hits, 
           the names of these HMTs, 
           their HMT IDs, strain/clone numbers, and NCBI ID numbers.

Blast db is from HOMD refseq: 
    blastdb_refseq_V15.22.p9/HOMD_16S_rRNA_RefSeq_V15.22.p9.fasta*

2021-12-13
script is:
   eren2014_abundance_parser.py

USAGE:
   Run it first time:
      eren2014_abundance_parser.py -i Eren2014-FromDatasetS1-oligotypesV1V3.csv
   to create the *.fna and blast.sh and *.fna.out files
   Then run it again:
      eren2014_abundance_parser.py -parse
   To parse the *.fna.out files and create the final BLAST_PARSE_RESULT.csv  

2021-12-10
Meeting w/ Jessica

using Meren spreadsheet: Eren2014-FromDatasetS1-oligotypesV1V3.csv
write py script to take sequence from colD and blast it against all HOMD refseqdb blastdb
getting all top hist and find associated HMTs


1- make local blast db (write a pyscript to accomplish this) w/ HMTs in defline
NO USE HOMD_16S_rRNA_RefSeq_V15.22.p9.fasta* from:  /mnt/efs/lv1_dev/blastdb/blast_db/oral16S
  =>scp -i ~/.ssh/andy.pem ubuntu@node.homd.info:homd/HOMD_16S_rRNA_RefSeq_V15.22* ./
Sample defline:
   Bartonella schoenbuchensis | HMT-001 | Strain: A28SC | GB: GQ422708 | Status: Named | Preferred Habitat: Unassigned | Genome: Genome: yes

Write script: homd-scripts/abundance_eren2014_parse.py
One script to blast -- when done another script to parse the output
2-blast then parse output (we dont have a cluster)
